#include<bits/stdc++.h>
using namespace std;

// 優先順位を返す関数
int getPrecedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
	if (op == '^') return 3;
    return 0; // その他
}

// 演算子かどうかを判定
bool isOperator(char ch) {
    return ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^';
}

// トークン化
vector<string> tokenize(const string& expr) {
    vector<string> tokens;
    string num;

    for (char ch : expr) {
        if (isdigit(ch)) {
            num += ch; // 数値を構築
        } else {
            if (!num.empty()) {
                tokens.push_back(num); // 数値をトークンとして追加
                num.clear();
            }
            if (isOperator(ch) || ch == '(' || ch == ')') {
                tokens.push_back(string(1, ch));
            }
        }
    }
    if (!num.empty()) {
        tokens.push_back(num); // 最後の数値を追加
    }
    return tokens;
}

// Shunting-Yardアルゴリズム
vector<string> toRPN(const vector<string>& tokens) {
    vector<string> output;  // 出力キュー
    stack<string> opStack; // 演算子スタック

    for (const auto& token : tokens) {
        if (isdigit(token[0])) {
            output.push_back(token); // 数値はそのまま出力
        } else if (token == "(") {
            opStack.push(token); // 左括弧をスタックに追加
        } else if (token == ")") {
            // 右括弧: 左括弧が出るまでスタックからポップ
            while (!opStack.empty() && opStack.top() != "(") {
                output.push_back(opStack.top());
                opStack.pop();
            }
            opStack.pop(); // 左括弧を捨てる
        } else if (isOperator(token[0])) {
            // 演算子: 優先順位が高い間スタックをポップ
            while (!opStack.empty() && getPrecedence(opStack.top()[0]) >= getPrecedence(token[0])) {
                output.push_back(opStack.top());
                opStack.pop();
            }
            opStack.push(token); // 演算子をスタックに追加
        }
    }

    // 残りの演算子をすべて出力
    while (!opStack.empty()) {
        output.push_back(opStack.top());
        opStack.pop();
    }

    return output;
}

// デバッグ出力
void printTokens(const vector<string>& tokens) {
    for (const auto& token : tokens) {
        cout << token << " ";
    }
    cout << endl;
}

int main() {
    string s;
	getline(cin,s);
    auto tokens = tokenize(s);
    auto rpn = toRPN(tokens);
    printTokens(rpn);
	stack<string>st;
	for(auto i:rpn){
		if(isOperator(i[0])){
			int x = stoi(st.top());
			st.pop();
			int y = stoi(st.top());
			st.pop();
			if(i == "+"){
				st.push(to_string(y+x));
			}else if(i == "-"){
				st.push(to_string(y-x));
			}else if(i == "*"){
				st.push(to_string(y*x));
			}else if(i == "/"){
				st.push(to_string(y/x));
			}else if(i == "^"){
				st.push(to_string(pow(y,x)));
			}
		}else{
			st.push(i);
		}
	}
	cout <<st.top()<<"\n";
    return 0;
}
